// üß† Bi·∫øn to√†n c·ª•c l∆∞u instance WASM
let Module = null;

// üß© Kh·ªüi t·∫°o WebAssembly module chaotic
async function initWasm() {
  if (!Module) {
    if (!window.ChaoticModulePromise) throw new Error("WASM ch∆∞a load xong");
    Module = await window.ChaoticModulePromise;

    // ƒê·ª£i WASM runtime kh·ªüi t·∫°o xong n·∫øu c·∫ßn
    if (!Module.calledRun && typeof Module.onRuntimeInitialized === 'function') {
      await new Promise(resolve => {
        const orig = Module.onRuntimeInitialized;
        Module.onRuntimeInitialized = () => { orig(); resolve(); };
      });
    }
  }
  return Module;
}

// üîê Sinh c·∫∑p kh√≥a RSA v√† g·ª≠i public key l√™n server
async function registerPubKey(videoId) {
  const kp = await crypto.subtle.generateKey(
    {
      name: 'RSA-OAEP',
      modulusLength: 2048,
      publicExponent: new Uint8Array([1, 0, 1]),
      hash: 'SHA-256'
    },
    false, ['encrypt', 'decrypt']
  );

  const spki = await crypto.subtle.exportKey('spki', kp.publicKey);
  const b64 = btoa(String.fromCharCode(...new Uint8Array(spki)));
  const pem = `-----BEGIN PUBLIC KEY-----\n${b64}\n-----END PUBLIC KEY-----`;

  const token = 'abc123'; // ho·∫∑c l·∫•y t·ª´ bi·∫øn m√¥i tr∆∞·ªùng frontend

  await fetch(`/register_pubkey/${videoId}?token=${encodeURIComponent(token)}`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/octet-stream',
      'Authorization': `Bearer ${token}` // n·∫øu backend c·∫ßn header n·ªØa
    },
    body: new TextEncoder().encode(pem)
  });

  return kp;
}

// üóùÔ∏è Nh·∫≠n payload m√£ ho√° v√† gi·∫£i m√£ ra AES key + tham s·ªë chaotic
async function fetchDecryptMetadata(videoId) {
  const kp = await registerPubKey(videoId); // G·ª≠i kh√≥a tr∆∞·ªõc

  const res = await fetch(`/get_key_rsa/${videoId}?token=abc123`);
  const { data_b64 } = await res.json(); // Payload ƒë√£ m√£ ho√° b·∫±ng RSA
  const cipher = Uint8Array.from(atob(data_b64), c => c.charCodeAt(0));

  // Gi·∫£i m√£ payload b·∫±ng private key
  const raw = await crypto.subtle.decrypt(
    { name: 'RSA-OAEP' },
    kp.privateKey,
    cipher
  );

  // Parse JSON ch·ª©a aes_key (base64), seed, r
  const jsonStr = new TextDecoder().decode(raw);
  const { aes_key: aes_b64, seed, r } = JSON.parse(jsonStr);

  // Import AES-GCM key t·ª´ base64
  const rawAes = Uint8Array.from(atob(aes_b64), c => c.charCodeAt(0));
  const aesKey = await crypto.subtle.importKey(
    'raw', rawAes, { name: 'AES-GCM' }, false, ['decrypt']
  );

  return { aesKey, seed, r, kp };
}

// üîì Gi·∫£i m√£ segment: AES-GCM + chaotic XOR
async function decryptChaotic(segmentBuffer, aesKey, seed, r) {
  const wasm = await initWasm();
  const view = new Uint8Array(segmentBuffer);
  const iv = view.subarray(0, 12);        // IV (nonce) 12 bytes
  const tag = view.subarray(12, 28);      // Auth tag 16 bytes
  const cipher = view.subarray(28);       // D·ªØ li·ªáu m√£ ho√°

  // N·ªëi ciphertext v√† tag l·∫°i
  const ctAndTag = new Uint8Array(cipher.length + tag.length);
  ctAndTag.set(cipher, 0);
  ctAndTag.set(tag, cipher.length);

  // Gi·∫£i m√£ AES-GCM
  const plainBuf = await crypto.subtle.decrypt(
    { name: 'AES-GCM', iv, tagLength: 128 },
    aesKey,
    ctAndTag
  );

  // XOR v·ªõi keystream chaotic
  const pre = new Uint8Array(plainBuf);
  const ptr = Module._generate_chaotic_keystream(seed, r, pre.length);
  const ks = new Uint8Array(Module.HEAPU8.buffer, ptr, pre.length);
  const out = new Uint8Array(pre.length);
  for (let i = 0; i < pre.length; i++) out[i] = pre[i] ^ ks[i];
  Module._free_buffer(ptr); // Gi·∫£i ph√≥ng b·ªô nh·ªõ WASM

  return out;
}

// ‚ñ∂Ô∏è H√†m ch√≠nh: t·∫£i, gi·∫£i m√£, ph√°t video
async function streamAndPlaySingle() {
  try {
    const videoId = 'sample1';

    // B1: Nh·∫≠n AES key + chaotic params
    const { aesKey, seed, r, kp } = await fetchDecryptMetadata(videoId);

    // B2: T·∫£i segment video ƒë√£ m√£ ho√°
    const res = await fetch(`/segment/${videoId}.enc`);
    const buf = await res.arrayBuffer();

    // B3: Gi·∫£i m√£ ho√†n to√†n
    const decrypted = await decryptChaotic(buf, aesKey, seed, r);

    // B4: Ph√°t video
    const video = document.getElementById('videoPlayer');
    const blobUrl = URL.createObjectURL(new Blob([decrypted], { type: 'video/mp4' }));
    video.setAttribute('src', blobUrl);

    // B5: ·∫®n src kh·ªèi DevTools
    Object.defineProperty(video, 'src', {
      get: () => {
        console.warn("üö´ src ƒë√£ b·ªã ·∫©n b·ªüi h·ªá th·ªëng b·∫£o v·ªá.");
        return null;
      },
      set: function (val) {
        HTMLMediaElement.prototype.__lookupSetter__('src').call(this, val);
      },
      configurable: true
    });

    // B6: Play ngay sau khi set src
    video.play().then(() => {
      // B7: Sau khi play, xo√° key kh·ªèi b·ªô nh·ªõ
      setTimeout(() => {
        try {
          aesKey = null;
          kp = null;
        } catch (_) {}
        if (typeof window.gc === 'function') window.gc(); // G·ªçi garbage collector n·∫øu c√≥
      }, 500);
    });

    // B8: Ch·∫∑n chu·ªôt tr√°i ƒë·ªÉ tr√°nh context menu
    video.addEventListener('mousedown', e => {
      if (e.button === 0) e.preventDefault();
    });

  } catch (err) {
    console.error("‚ùå L·ªói ph√°t video:", err);
  }
}

// üöÄ Kh·ªüi ƒë·ªông sau khi DOM load xong
document.addEventListener('DOMContentLoaded', streamAndPlaySingle);
